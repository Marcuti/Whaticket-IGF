"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const read_importer_manifest_1 = require("@pnpm/read-importer-manifest");
const cpFile = require("cp-file");
const fg = require("fast-glob");
const fs = require("mz/fs");
const path = require("path");
const rimraf = require("rimraf-then");
const writeJsonFile = require("write-json-file");
const runNpm_1 = require("./runNpm");
async function default_1(args, opts, command) {
    if (args.length && args[0].endsWith('.tgz')) {
        await runNpm_1.default(['publish', ...args]);
        return;
    }
    const prefix = args.length && args[0] || process.cwd();
    let _status;
    await fakeRegularManifest(prefix, opts.workspacePrefix || prefix, async () => {
        const { status } = await runNpm_1.default(['publish', ...opts.argv.original.slice(1)]);
        _status = status;
    });
    if (_status !== 0) {
        process.exit(_status);
    }
}
exports.default = default_1;
async function pack(args, opts, command) {
    let _status;
    await fakeRegularManifest(opts.prefix, opts.workspacePrefix || opts.prefix, async () => {
        const { status } = await runNpm_1.default(['pack', ...opts.argv.original.slice(1)]);
        _status = status;
    });
    if (_status !== 0) {
        process.exit(_status);
    }
}
exports.pack = pack;
const LICENSE_GLOB = 'LICEN{S,C}E{,.*}';
const findLicenses = fg.bind(fg, [LICENSE_GLOB]);
async function fakeRegularManifest(prefix, workspacePrefix, fn) {
    // If a workspace package has no License of its own,
    // license files from the root of the workspace are used
    const copiedLicenses = prefix !== workspacePrefix && (await findLicenses({ cwd: prefix })).length === 0
        ? await copyLicenses(workspacePrefix, prefix) : [];
    const { fileName, manifest, writeImporterManifest } = await read_importer_manifest_1.default(prefix);
    const exoticManifestFormat = fileName !== 'package.json';
    if (exoticManifestFormat) {
        await rimraf(path.join(prefix, fileName));
        await writeJsonFile(path.join(prefix, 'package.json'), manifest);
    }
    await fn();
    if (exoticManifestFormat) {
        await rimraf(path.join(prefix, 'package.json'));
        await writeImporterManifest(manifest, true);
    }
    await Promise.all(copiedLicenses.map((copiedLicense) => fs.unlink(copiedLicense)));
}
async function copyLicenses(sourceDir, destDir) {
    const licenses = await findLicenses({ cwd: sourceDir });
    if (licenses.length === 0)
        return [];
    const copiedLicenses = [];
    await Promise.all(licenses
        .map((licenseRelPath) => path.join(sourceDir, licenseRelPath))
        .map((licensePath) => {
        const licenseCopyDest = path.join(destDir, path.basename(licensePath));
        copiedLicenses.push(licenseCopyDest);
        return cpFile(licensePath, licenseCopyDest);
    }));
    return copiedLicenses;
}
//# sourceMappingURL=publish.js.map