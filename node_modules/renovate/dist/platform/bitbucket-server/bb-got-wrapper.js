"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const got_1 = __importDefault(require("got"));
const url_1 = __importDefault(require("url"));
const hostRules = __importStar(require("../../util/host-rules"));
let cache = {};
const hostType = 'bitbucket-server';
let endpoint;
async function get(path, options) {
    const host = url_1.default.parse(path).host || url_1.default.parse(endpoint).host;
    const opts = {
        // TODO: Move to configurable host rules, or use utils/got
        timeout: 60 * 1000,
        json: true,
        basic: false,
        ...hostRules.find({ hostType, host }),
        ...options,
    };
    const url = url_1.default.resolve(endpoint, path);
    const method = (opts.method || /* istanbul ignore next */ 'get').toLowerCase();
    const useCache = opts.useCache;
    if (method === 'get' && useCache !== false && cache[path]) {
        logger.trace({ path }, 'Returning cached result');
        return cache[path];
    }
    opts.headers = {
        'user-agent': 'https://github.com/renovatebot/renovate',
        'X-Atlassian-Token': 'no-check',
        authorization: opts.token
            ? /* istanbul ignore next */ `Basic ${opts.token}`
            : undefined,
        ...opts.headers,
    };
    const res = await got_1.default(url, opts);
    // logger.debug(res.body);
    if (method.toLowerCase() === 'get') {
        cache[path] = res;
    }
    return res;
}
const helpers = ['get', 'post', 'put', 'patch', 'head', 'delete'];
exports.api = {};
for (const x of helpers) {
    exports.api[x] = (url, opts) => get(url, Object.assign({}, opts, { method: x.toUpperCase() }));
}
exports.api.reset = function reset() {
    cache = {};
};
exports.api.setEndpoint = (e) => {
    endpoint = e;
};
exports.default = exports.api;
