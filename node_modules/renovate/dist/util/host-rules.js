"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = __importDefault(require("url"));
const hostTypes = {};
const hostsOnly = {};
function update(params) {
    const { hostType } = params;
    if (!hostType) {
        if (params.endpoint) {
            const { host } = url_1.default.parse(params.endpoint);
            hostsOnly[host] = params;
            return true;
        }
        throw new Error('Failed to set configuration: no hostType or endpoint specified');
    }
    const config = { ...params };
    const { endpoint } = config;
    if (!endpoint) {
        // istanbul ignore if
        if (hostType === 'docker') {
            hostTypes.docker = params;
            return true;
        }
        throw new Error(`Failed to configure hostType '${hostType}': no endpoint defined`);
    }
    config.endpoint = endpoint.replace(/[^/]$/, '$&/');
    let { host } = config;
    // extract host from endpoint
    host = host || (endpoint && url_1.default.parse(endpoint).host);
    // endpoint is in the format host/path (protocol missing)
    host = host || (endpoint && url_1.default.parse('http://' + endpoint).host);
    if (!host) {
        throw new Error(`Failed to configure hostType '${hostType}': no host for endpoint '${endpoint}'`);
    }
    hostTypes[hostType] = { ...hostTypes[hostType] };
    logger.debug({ config }, 'Setting hostRule');
    hostTypes[hostType][host] = { ...hostTypes[hostType][host], ...config };
    return true;
}
exports.update = update;
function copy(config) {
    return JSON.parse(JSON.stringify(config || null));
}
function find({ hostType, host, endpoint, }) {
    const massagedHost = host || (endpoint ? url_1.default.parse(endpoint).host : undefined);
    if (!hostTypes[hostType]) {
        if (massagedHost && hostsOnly[massagedHost]) {
            return copy(hostsOnly[massagedHost]);
        }
        return null;
    }
    // istanbul ignore if
    if (hostType === 'docker') {
        if (hostTypes.docker.hostType === 'docker') {
            return copy(hostTypes.docker);
        }
        return copy(hostTypes.docker[massagedHost]);
    }
    if (massagedHost) {
        return copy(hostTypes[hostType][massagedHost]);
    }
    const configs = Object.values(hostTypes[hostType]);
    let config;
    if (configs.length === 1) {
        [config] = configs;
    }
    return copy(config);
}
exports.find = find;
function hosts({ hostType }) {
    return Object.keys({ ...hostTypes[hostType] });
}
exports.hosts = hosts;
function clear() {
    Object.keys(hostTypes).forEach(key => delete hostTypes[key]);
}
exports.clear = clear;
